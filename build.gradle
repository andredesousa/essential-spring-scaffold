plugins {
    id 'com.github.johnrengelman.processes' version '0.5.0'
    id 'com.github.ben-manes.versions' version '0.39.0'
	id 'org.springframework.boot' version '2.5.5'
    id 'org.springdoc.openapi-gradle-plugin' version '1.3.3'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'pl.allegro.tech.build.axion-release' version '1.13.3'
    id 'se.bjurr.gitchangelog.git-changelog-gradle-plugin' version '1.71.4'
    id 'jacoco'
	id 'java'
}

group = 'app'
version = scmVersion.version
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

sourceSets {
    integrationTest {
        compileClasspath += main.output
        runtimeClasspath += main.output
    }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'io.springfox:springfox-boot-starter:3.0.0'
    implementation 'io.springfox:springfox-swagger-ui:3.0.0'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

    integrationTestImplementation sourceSets.main.runtimeClasspath
    integrationTestImplementation sourceSets.test.runtimeClasspath
}

openApi {
    outputDir = file('build/docs')
}

bootBuildImage {
	imageName = 'spring-api:' + project.version
}

jacoco {
    toolVersion = '0.8.7'
}

jacocoTestReport {
    dependsOn test
    finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {
    dependsOn test
    violationRules {
        rule {
            limit {
                minimum = 0.8
            }
        }
    }
}

test {
    finalizedBy jacocoTestReport
	useJUnitPlatform()
    testLogging {
        exceptionFormat = 'full'
    }
}

task integrationTest(type: Test) {
    description = 'Run the integration tests.'
    group = 'Verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath

    useJUnitPlatform()
    testLogging {
        exceptionFormat = 'full'
    }
}

task generateChangelog(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
    description = 'Generates a changelog from GIT repository.'
    group = 'Release'
    fromRepo = file('.')
    file = file('CHANGELOG.md');
    templateContent = file('changelog.mustache').getText('UTF-8');
}

task deploy(type: Exec) {
    commandLine 'ansible-playbook', 'ci/deploy/deploy-to-swarm.yaml'
    description = 'Deploys the application to Docker Swarm.'
    group = 'Release'
}
